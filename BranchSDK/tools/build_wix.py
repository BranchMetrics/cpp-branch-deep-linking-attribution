"""
Script to build Product.wxs for Wix installer using the output
of stage.py under build\*\stage.
"""

import json, os, shutil
from xml.dom import minidom
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Comment, Element, SubElement

# https://pymotw.com/2/xml/etree/ElementTree/create.html
def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

def make_directory_elem(elem, identifier, name=None):
    if name:
        return SubElement(elem, "Directory", {"Id": identifier, "Name": name})
    else:
        return SubElement(elem, "Directory", {"Id": identifier})

"""
Produces a nested tree of Directory elements like:

          <Directory Id="INCLUDEFOLDER" Name="include">
            <Directory Id="BRANCHIOINCLUDEFOLDER" Name="BranchIO">
              <Directory Id="BRANCHIOEVENTINCLUDEFOLDER" Name="Event" />
            </Directory>
          </Directory>
"""
def wix_directory(elem, path, prefix):
    basepath = os.path.basename(path)
    directory_id = prefix + basepath.upper()
    wdir = make_directory_elem(elem, directory_id, basepath)

    files = os.listdir(path)
    for f in files:
        full_path = os.path.join(path, f)
        if not os.path.isdir(full_path):
            continue
        wix_directory(wdir, full_path, directory_id)

    return wdir

# TODO: Don't necessarily need ET here, since we're just generating
# text, but this may be more flexible.

# header elements
root = Element("Wix", {"xmlns": "http://schemas.microsoft.com/wix/2006/wi"})
root.append(Comment(" Generated by build_wix.py. Do not edit by hand. "))
product = SubElement(root, "Product", {
    "Id": "*",
    "Name": "Branch C++ SDK for Windows",
    "Language": "1033",
    "Version": "0.1.0",
    "Manufacturer": "Branch Metrics, Inc.",
    "UpgradeCode": "29b1dc08-2190-48f0-bc3c-7455381f2156"
    })
SubElement(product, "Package", {
    "InstallerVersion": "200",
    "Compressed": "yes",
    "InstallScope": "perMachine"
    })
SubElement(product, "MajorUpgrade", {
    "DowngradeErrorMessage": "A newer version of [ProductName] is already installed."
    })
SubElement(product, "Media", {
    "Id": "1",
    "Cabinet": "cab1.cab",
    "EmbedCab": "yes"
    })
SubElement(product, "Icon", {
    "Id": "branch.ico",
    "SourceFile": "branch-badge-dark.ico"
    })
SubElement(product, "Property", {
    "Id": "ARPPRODUCTION",
    "Value": "branch.ico"
    })

feature = SubElement(product, "Feature", {
    "Id": "ProductFeature",
    "Title": "Branch Installer",
    "Level": "1"
    })

SubElement(feature, "ComponentGroupRef", {"Id": "BranchHeaders"})
SubElement(feature, "ComponentGroupRef", {"Id": "BranchLibrariesX64"})
SubElement(feature, "ComponentGroupRef", {"Id": "BranchLibrariesX86"})
SubElement(feature, "ComponentGroupRef", {"Id": "ThirdPartyHeaders"})
SubElement(feature, "ComponentGroupRef", {"Id": "ThirdPartyLibrariesX64"})
SubElement(feature, "ComponentGroupRef", {"Id": "ThirdPartyLibrariesX86"})

# os.path.abspath & os.path.join build the right kind of path for the os,
# using backslashes on Windows without typing \\ every time here.
build_root = os.path.abspath(os.path.dirname(__file__) + "../../build")

# Take all header files from Releasex64 arbitrarily, since they
# don't vary by build.
stage_root = os.path.join(build_root, "Releasex64", "stage")
include_root = os.path.join(stage_root, "include")
lib_root = os.path.join(stage_root, "lib")

dir_fragment = SubElement(root, "Fragment")
source_dir = make_directory_elem(dir_fragment, "TARGETDIR", "SourceDir")
# C:\Program Files (x86)
program_files_folder = make_directory_elem(source_dir, "ProgramFilesDir")
# C:\Program Files (x86)\Branch SDK
branch_sdk_install_folder = make_directory_elem(program_files_folder, "INSTALLFOLDER", "Branch SDK")

# Recursively build a nested tree of Directory elements to describe
# all header folders to be installed.
wix_directory(branch_sdk_install_folder, include_root, "")

# TODO: If possible, generate one installer for both archs with
# both release and debug. Otherwise, one per arch.
# for build in os.listdir(build_root):
#     stage_root = os.path.join(build_root, build, "stage")
#     include_root = os.path.join(stage_root, "include")
#     lib_root = os.path.join(stage_root, "lib")

lib_folder = make_directory_elem(branch_sdk_install_folder, "LIBFOLDER", "lib")
x64_lib_folder = make_directory_elem(lib_folder, "X64LIBFOLDER", "x64")
x86_lib_folder = make_directory_elem(lib_folder, "X86LIBFOLDER", "x86")
x64_debug_folder = make_directory_elem(x64_lib_folder, "X64DEBUGLIBFOLDER", "Debug")
x86_debug_folder = make_directory_elem(x86_lib_folder, "X86DEBUGLIBFOLDER", "Debug")
x64_release_folder = make_directory_elem(x64_lib_folder, "X64RELEASELIBFOLDER", "release")
x86_release_folder = make_directory_elem(x86_lib_folder, "X86RELEASELIBFOLDER", "release")

output = prettify(root)
print(output)

output_path = os.path.abspath(build_root + "/../BranchSDK/Windows/BranchInstaller/Product.wxs")
open(output_path, "w").write(output)
